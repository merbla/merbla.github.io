<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Serilog on Get Amongst It!</title>
    <link>https://merbla.com/tags/serilog/</link>
    <description>Recent content in Serilog on Get Amongst It!</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 10 Jul 2018 00:00:00 +1000</lastBuildDate>
    
	<atom:link href="https://merbla.com/tags/serilog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exploring Serilog v2 - Using Splunk with the File Sink and Docker</title>
      <link>https://merbla.com/2018/07/10/exploring-serilog-v2---using-splunk-with-the-file-sink-and-docker/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +1000</pubDate>
      
      <guid>https://merbla.com/2018/07/10/exploring-serilog-v2---using-splunk-with-the-file-sink-and-docker/</guid>
      <description>I have had a few questions recently about how to setup Docker with Serilog and Splunk when logging to a file. Generally I opt to use the HTTP Event Collector however there are some situations that warrant logging to a file.
A simple way to get logging out via a file to Splunk in Docker is via a shared volume. As I mentioned I can think of better production approaches however here is some quick setups to get up and running.</description>
    </item>
    
    <item>
      <title>Exploring Serilog v2 - Using the HTTP Client Factory</title>
      <link>https://merbla.com/2018/04/25/exploring-serilog-v2---using-the-http-client-factory/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +1000</pubDate>
      
      <guid>https://merbla.com/2018/04/25/exploring-serilog-v2---using-the-http-client-factory/</guid>
      <description>This is the next post in a series re-discovering Serilog v2.
Recently, the new HTTP Client Factory was announced as apart of the ASP.NET Core 2.1 release. There have been a number of posts relating to how it can be hooked with ASP.Net.
 ASP.NET Core 2.1-preview1: Introducing HTTPClient factory HttpClientFactory for typed HttpClient instances in ASP.NET Core 2.1  In this post, I wanted to illustrate how you can use this new package whilst swapping in Serilog&amp;rsquo;s superior logging capabilites.</description>
    </item>
    
    <item>
      <title>Exploring Serilog v2 - ASP.Net Core</title>
      <link>https://merbla.com/2018/04/10/exploring-serilog-v2---asp.net-core/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +1000</pubDate>
      
      <guid>https://merbla.com/2018/04/10/exploring-serilog-v2---asp.net-core/</guid>
      <description>This is the next post in a series re-discovering Serilog v2.
In this post, ASP.Net Core will be the focus. Along with .Net Core, ASP.Net Core has experienced significant changes over the past few years. As such Serilog has adapted accordingly.
In this post, tooling is as follows.
dotnet --info .NET Command Line Tools (2.1.4) Product Information: Version: 2.1.4 Commit SHA-1 hash: 5e8add2190 Runtime Environment: OS Name: Mac OS X OS Version: 10.</description>
    </item>
    
    <item>
      <title>Exploring Serilog v2 - Configuration</title>
      <link>https://merbla.com/2018/04/05/exploring-serilog-v2---configuration/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +1000</pubDate>
      
      <guid>https://merbla.com/2018/04/05/exploring-serilog-v2---configuration/</guid>
      <description>This is the next post in a series re-discovering Serilog v2.
In the introduction to the Serilog Console Sink I mentioned about how you can use a number of ways to configure Serilog. Below is a simple guide on which approach you may like to take when setting up your configuration.
 mermaid.initialize({startOnLoad:true}); graph TD C(Serilog Configuration) --| | Y{What do I want? } Y --| Code | D(Fluent Interface) Y --| A File | Z{What file type?</description>
    </item>
    
    <item>
      <title>Exploring Serilog v2 - The Console Sink</title>
      <link>https://merbla.com/2018/04/04/exploring-serilog-v2---the-console-sink/</link>
      <pubDate>Wed, 04 Apr 2018 00:00:00 +1000</pubDate>
      
      <guid>https://merbla.com/2018/04/04/exploring-serilog-v2---the-console-sink/</guid>
      <description>Following on from my initial post here a some quick notes on the Serilog Console Sink.
This sink has a varied history, originally packaged with the Serilog library. It was split out during the great sink split of 2015, and at that time the features were split into two projects namely the Console Sink and the Coloured Console Sink. Soon after Nick introduced the Literate Console Sink inspired by literate programming.</description>
    </item>
    
    <item>
      <title>Exploring Serilog v2 - Lets Go!</title>
      <link>https://merbla.com/2018/04/02/exploring-serilog-v2---lets-go/</link>
      <pubDate>Mon, 02 Apr 2018 17:19:02 +1000</pubDate>
      
      <guid>https://merbla.com/2018/04/02/exploring-serilog-v2---lets-go/</guid>
      <description>Serilog has been around for some time and since then the ecosystem has grown and been developed behind a fantasic community and the leadership of Nick. I have been lucky enough to be involved for some time as a co-owner of Serilog however I still find myself forgetting key areas of the platform.
As as a result, I thought I start a series of posts addressing areas that are commonly asked about either in our Gitter Channel, on GitHub or elsewhere.</description>
    </item>
    
    <item>
      <title>Serilog: Log.CloseAndFlush();</title>
      <link>https://merbla.com/2016/07/06/serilog-log-closeandflush/</link>
      <pubDate>Wed, 06 Jul 2016 23:35:31 +0000</pubDate>
      
      <guid>https://merbla.com/2016/07/06/serilog-log-closeandflush/</guid>
      <description>I have spoken to many people over recent years about their use of Serilog and how it helps their development. One of the most common issues I encounter when people are starting out, relates to the Hello World console app.
Someone may start out with a simple example using the Literate sink such as the code below.
static void Main(string[] args) { Log.Logger = new LoggerConfiguration() .WriteTo.LiterateConsole() .CreateLogger(); Log.Information(&amp;quot;Hello World.</description>
    </item>
    
    <item>
      <title>DotNet Core RC2, Splunk and Serilog</title>
      <link>https://merbla.com/2016/06/02/dotnet-core-splunk-and-serilog/</link>
      <pubDate>Thu, 02 Jun 2016 23:34:35 +0000</pubDate>
      
      <guid>https://merbla.com/2016/06/02/dotnet-core-splunk-and-serilog/</guid>
      <description>Over at Serilog, we have been busy over the last few months getting the library ready for the next release of DotNet.
After some changes to the core library it was time to move our attention to the sinks and enrichers.
The Splunk sink is now available with RC2 compatibility.
The packages are Serilog.Sinks.Splunk 2.0.0-rc-xxx and can be sourced from NuGet.
This now means you can use DotNet, Serilog and Splunk via the HTTP Event Collector on a wide range of platforms.</description>
    </item>
    
    <item>
      <title>Serilog and Splunk 6.3 - The Event Collector Sink</title>
      <link>https://merbla.com/2015/10/12/serilog-splunk-6-3-event-collector-sink-2/</link>
      <pubDate>Mon, 12 Oct 2015 11:34:00 +0000</pubDate>
      
      <guid>https://merbla.com/2015/10/12/serilog-splunk-6-3-event-collector-sink-2/</guid>
      <description>Recently I had the privilege of attending and speaking at Splunk .conf. During the keynote a major announcement was made relating to the way you can get data into Splunk. The new HTTP Event Collector announced in Splunk 6.3 allows for so many new ways of publishing data from IoT, Cloud, pretty much anything that understands HTTP.
So of course that means an update of the Serilog sink was required.</description>
    </item>
    
    <item>
      <title>Serilog and the new Splunk Sink</title>
      <link>https://merbla.com/2014/09/03/serilog-splunk-6-3-event-collector-sink/</link>
      <pubDate>Wed, 03 Sep 2014 09:43:00 +0000</pubDate>
      
      <guid>https://merbla.com/2014/09/03/serilog-splunk-6-3-event-collector-sink/</guid>
      <description>Over the last couple of years, like most in software I have become more and more involved with the &amp;ldquo;DevOps&amp;rdquo; landscape. One product that has been a great help when working with the IoT is Splunk. In my opinion, when dealing with distributed systems that utilise many devices and operating systems, the architecture of Splunk simply stacks up. This post will not go into the details of how Splunk works, rather how you can start utilising it in the world of .</description>
    </item>
    
  </channel>
</rss>